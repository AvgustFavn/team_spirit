import logging
import re
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from back import is_worker, is_admin, user_reg, add_bid, send_new_bid, get_bids, is_employee, accept_bid, cancel_bid, \
    cats, set_category, profile_bd, links_bd, is_sponsor, del_admin_bd, add_admin_bd, add_vbiv_bd, del_vbiv_bd, \
    add_tp_bd, del_tp_bd, del_worker_bd, change_about_bd, card_bd, share_worker
from db_stuff import session, About, Links, Profits, User, BASE_DIR

API_TOKEN = '6362029327:AAGoXaoOjSk7wLaAQA3qQXKPcmmtePktO1k'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    username = message.from_user.username
    user_id = message.from_user.id
    if is_worker(int(user_id)):
        #  –†–∞–±–æ—á–µ–µ –≤—Å—è–∫–æ–µ
        print(int(user_id))
        keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_markup.add(KeyboardButton('–û –ø—Ä–æ–µ–∫—Ç–µ üí™', callback_data='about'))
        keyboard_markup.add(KeyboardButton('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã üíº', callback_data='category'))
        keyboard_markup.add(KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data='profile'))
        if is_admin(int(user_id)): keyboard_markup.add(KeyboardButton('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data='admin'))
        await bot.send_message(text='–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–µ–º –≤–æ—Ä–∫–∞—Ç—å, –∑–∞—Ä—è–¥—É!', reply_markup=keyboard_markup, chat_id=user_id)

    else:
        try:
            user_reg(username, int(user_id))
        except:
            pass
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        keyboard_markup.add(types.InlineKeyboardButton('–Ø –ø—Ä–æ—á–∏—Ç–∞–ª –∏ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ‚úÖ', callback_data='okk'))

        text = f"""
        üëã –ü—Ä–∏–≤–µ—Ç,{username}, –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –∏ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n
    
        ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ª—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞, —Ñ–ª—É–¥, —Å–ø–∞–º, –∫–æ–º–º–µ—Ä—Ü–∏—è, –ø—Ä–æ–¥–∞–∂–∞ —É—Å–ª—É–≥ –≤ —á–∞—Ç–µ –≤–æ—Ä–∫–µ—Ä–æ–≤\n
        ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–≤, —Ä–∞–∑–≤–æ–¥–∏—Ç—å —Å—Ä–∞—á, –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ\n
        ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ –≤ –ª—é–±–æ–º –µ–≥–æ –≤–∏–¥–µ\n
        ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–º–æ–Ω—Ç–∞–º —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n
        ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n
        ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–º–æ–Ω—Ç–∞–º —Å–≤–æ–∏ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n
        ‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ —Å–∫–∞–º–∞ –∏–ª–∏ —Å–∫–∞–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ –ª—é–±–æ–º –µ–≥–æ –≤–∏–¥–µ\n
        ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã\n
        ‚Ä¢ –¢–°—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–æ—à–µ–ª—å–∫–æ–≤\n
        ‚Ä¢ –¢–°—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –≤–æ—Ä–∫–µ—Ä–∞ –±–µ–∑ –æ–±—ë—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω\n
        
        ‚úÖ –ï—Å–ª–∏ —Ç—ã —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n
        """
        image_path = f'{BASE_DIR}\\images\\team_call.jpg'
        with open(image_path, 'rb') as photo:
            await bot.send_photo(user_id, photo, caption=text, reply_markup=keyboard_markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query_handler(lambda c: c.data == 'okk')
async def send_text(message: types.Message):
    user_id = message.from_user.id
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ:\n' \
           '1) –í–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –º–µ—Å—Ç–æ –≤–æ—Ä–∫–∞\n' \
           '2) –ö–∞–∫—É—é –∫–∞—Å—Å—É –±–µ–∑ % –¥–µ–ª–∞–µ—à—å –∑–∞ –Ω–µ–¥–µ–ª—é\n' \
           '3) –ü–æ—á–µ–º—É –∏—â–µ—à—å –Ω–æ–≤—É—é —Ç–∏–º—É?'
    await bot.send_message(text=text, chat_id=user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bids
@dp.message_handler(commands=['bids'])
async def show_bids_list(message: types.Message):
    user_id = message.from_user.id
    if is_admin(user_id):
        await get_bids(user_id)

@dp.callback_query_handler(lambda c: c.data.startswith('accept_bidid_'))
async def process_accept(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if is_employee(user_id):
        bid_id = int(callback_query.data[int(str(callback_query.data).find('accept_bidid_'))+13:])
        user = accept_bid(bid_id)
        user.data_join = datetime.now()
        session.add(user)
        session.commit()
        await callback_query.message.edit_text('–£ –≤–∞—Å –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä!')
        await bot.send_message(chat_id=user.tg_id, text='–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ—Ä–∫–∞!\n'
                                                        'ü©µ /start ü©µ')

@dp.callback_query_handler(lambda c: c.data.startswith('cancel_bidid_'))
async def process_cancel(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if is_employee(user_id):
        bid_id = int(callback_query.data[int(str(callback_query.data).find('cancel_bidid_'))+13:])
        user = cancel_bid(bid_id)
        await callback_query.message.edit_text('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏')
        await bot.send_message(chat_id=user.tg_id, text='–í–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏ :( –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!')

############################ –î–∞–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–æ—Ä–∫–∞ ####################################

@dp.message_handler(lambda message: message.text == '–ü—Ä–æ –Ω–∞—Å üí™')
async def about(message: types.Message):
    user_id = message.from_user.id
    about_ = session.query(About).order_by(About.id.desc()).first()
    if about_:
        text = about_.text
    else:
        text = '–ü–æ–∫–∞ —Ç—É—Ç –Ω–∏—á–µ–≥–æ'

    image_path = f'{BASE_DIR}\\images\\about.jpg'
    with open(image_path, 'rb') as photo:
        await bot.send_photo(user_id, photo, caption=text)

@dp.message_handler(lambda message: message.text == '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã üíº')
async def category(message: types.Message):
    user_id = message.from_user.id
    await cats(user_id)

@dp.callback_query_handler(lambda c: c.data.startswith('take_cat_'))
async def change_category(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cat = callback_query.data[str(callback_query.data).find('take_cat_') + 9:]
    set_category(user_id, cat)
    await bot.send_message(chat_id=user_id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é! –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞ :)')

@dp.message_handler(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å üë§')
async def profile(message: types.Message):
    user_id = message.from_user.id
    await profile_bd(user_id)

@dp.callback_query_handler(lambda c: c.data == 'links')
async def links(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await links_bd(user_id)

@dp.callback_query_handler(lambda c: c.data == 'new_link')
async def links(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
    keyboard_markup.add(types.InlineKeyboardButton('–ù–∞—Ä–∫–æ', callback_data=f'new_link_narko'))
    await bot.send_message(chat_id=user_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É —á–µ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard_markup)

@dp.callback_query_handler(lambda c: c.data == 'new_link_narko')
async def new_link_narko(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    invite_link = f'https://t.me/luminoreshop_bot?start={user_id}'
    link = Links(user_id=user_id, link=invite_link, category='–Ω–∞—Ä–∫–æ')
    session.add(link)
    session.commit()
    await bot.send_message(chat_id=user_id, text=f'–í–∞—à–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}')

@dp.message_handler(lambda message: message.text == '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
async def admin(message: types.Message):
    user_id = message.from_user.id
    if is_admin(int(user_id)):
        text = '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:'
        keyboard_markup = types.InlineKeyboardMarkup(row_width=2)
        if is_sponsor(int(user_id)):
            keyboard_markup.add(types.InlineKeyboardButton('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç', callback_data='add_profit'))
            keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='del_admin'))
            keyboard_markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='add_admin'))
            keyboard_markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É', callback_data='cards'))
        keyboard_markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤–±–∏–≤–∞', callback_data='add_vbiv'))
        keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤–±–∏–≤–∞', callback_data='del_vbiv'))
        keyboard_markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¢–ü', callback_data='add_tp'))
        keyboard_markup.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –¢–ü', callback_data='del_tp'))
        keyboard_markup.add(types.InlineKeyboardButton('–í—ã–≥–Ω–∞—Ç—å –≤–æ—Ä–∫–µ—Ä–∞', callback_data='del_worker'))
        keyboard_markup.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å "–æ –Ω–∞—Å"', callback_data='change_about'))
        keyboard_markup.add(types.InlineKeyboardButton('–í—Å–µ –∑–∞—è–≤–∫–∏', callback_data='bids'))
        image_path = f'{BASE_DIR}\\images\\admin.jpg'
        with open(image_path, 'rb') as photo:
            await bot.send_photo(user_id, photo, caption=text, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data == 'add_profit')
async def add_profit_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–∫–∏–π —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–ø, –≤–±–∏–≤–∞ –∏ –¥—Ä –æ–ø—Ü–∏–π, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∏—Ö. –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤—ã—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—á–∞—Å—Ç–∏—è —Ç–ø, –≤–±–∏–≤–∞:\n'
                                                 ' /add_profit 1)–ù–∏–∫ –≤–æ—Ä–∫–µ—Ä–∞\n2)–ù–∏–∫ –¢–ü\n3)–ü–æ–ª–Ω–∞—è —Å—É–º–º–∞ —Å–Ω—è—Ç–∏—è –≤ USDT \n4)–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ—Ä–∫–∞ (–Ω–∞—Ä–∫–æ) \n')

@dp.callback_query_handler(lambda c: c.data == 'cards')
async def cards_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞—è–≤–æ–∫: /card (–∫–∑, —É–∫—Ä, —Ä—É—Å) 2929293377273279237\n'
                                                 '–ü—Ä–∏–º–µ—Ä: /card –∫–∑ 33787739929')

@dp.callback_query_handler(lambda c: c.data == 'bids')
async def bids_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞—è–≤–æ–∫: /bids')

@dp.callback_query_handler(lambda c: c.data == 'del_admin')
async def del_admin_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: /del_admin @username')


@dp.callback_query_handler(lambda c: c.data == 'add_admin')
async def add_admin_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: /add_admin @username')

@dp.callback_query_handler(lambda c: c.data == 'add_vbiv')
async def add_vbiv_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–±–∏–≤–∞: /add_vbiv @username')

@dp.callback_query_handler(lambda c: c.data == 'del_vbiv')
async def del_vbiv_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–±–∏–≤–∞: /del_vbiv @username')

@dp.callback_query_handler(lambda c: c.data == 'add_tp')
async def add_tp_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¢–ü: /add_tp @username')

@dp.callback_query_handler(lambda c: c.data == 'del_tp')
async def del_tp_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¢–ü: /del_tp @username')

@dp.callback_query_handler(lambda c: c.data == 'del_worker')
async def del_worker_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞: /del_worker @username')

@dp.callback_query_handler(lambda c: c.data == 'change_about')
async def change_about_mess(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(chat_id=user_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è "–û –Ω–∞—Å": /change_about –¢—É—Ç –∫–∞–∫–æ–µ-—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ')

@dp.message_handler(commands=['del_admin'])
async def del_admin(message: types.Message):
    user_id = message.from_user.id
    if is_sponsor(int(user_id)):
        username = message.text[str(message.text).find('@') + 1:]
        del_admin_bd(username)
        await bot.send_message(chat_id=user_id, text='–ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω!')

@dp.message_handler(commands=['add_admin'])
async def add_admin(message: types.Message):
    user_id = message.from_user.id
    if is_sponsor(int(user_id)):
        username = message.text[str(message.text).find('@') + 1:]
        add_admin_bd(username)
        await bot.send_message(chat_id=user_id, text='–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!')

@dp.message_handler(commands=['add_vbiv'])
async def add_vbiv(message: types.Message):
    user_id = message.from_user.id
    if is_admin(int(user_id)):
        username = message.text[str(message.text).find('@') + 1:]
        add_vbiv_bd(username)
        await bot.send_message(chat_id=user_id, text='–í–±–∏–≤ –¥–æ–±–∞–≤–ª–µ–Ω!')

@dp.message_handler(commands=['del_vbiv'])
async def del_vbiv(message: types.Message):
    user_id = message.from_user.id
    if is_admin(int(user_id)):
        username = message.text[str(message.text).find('@') + 1:]
        del_vbiv_bd(username)
        await bot.send_message(chat_id=user_id, text='–í–±–∏–≤ —É–¥–∞–ª–µ–Ω!')

@dp.message_handler(commands=['add_tp'])
async def add_tp(message: types.Message):
    user_id = message.from_user.id
    if is_admin(int(user_id)):
        username = message.text[str(message.text).find('@') + 1:]
        add_tp_bd(username)
        await bot.send_message(chat_id=user_id, text='–¢–ü –¥–æ–±–∞–≤–ª–µ–Ω!')

@dp.message_handler(commands=['del_tp'])
async def del_tp(message: types.Message):
    user_id = message.from_user.id
    if is_admin(int(user_id)):
        username = message.text[str(message.text).find('@') + 1:]
        del_tp_bd(username)
        await bot.send_message(chat_id=user_id, text='–¢–ü —É–¥–∞–ª–µ–Ω!')

@dp.message_handler(commands=['del_worker'])
async def del_worker(message: types.Message):
    user_id = message.from_user.id
    if is_admin(int(user_id)):
        username = message.text[str(message.text).find('@') + 1:]
        del_worker_bd(username)
        await bot.send_message(chat_id=user_id, text=f'–í–æ—Ä–∫–µ—Ä @{username}, –±–æ–ª—å—à–µ –Ω–µ –≤–æ—Ä–∫–µ—Ä! –û–Ω –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç '
                                                     f'–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–æ—Ä–∫–µ—Ä–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å '
                                                     f'–∏–∑ —á–∞—Ç–æ–≤')

@dp.message_handler(commands=['change_about'])
async def change_about(message: types.Message):
    user_id = message.from_user.id
    if is_admin(int(user_id)):
        text = message.text
        change_about_bd(text.replace('/change_about ', ''))
        await bot.send_message(chat_id=user_id, text='–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')

@dp.message_handler(commands=['card'])
async def card(message: types.Message):
    user_id = message.from_user.id
    if is_sponsor(int(user_id)):
        data = message.text
        country, card = data.replace('/card ', '').split(' ')
        print(country, card)
        card_bd(country, card)
        await bot.send_message(chat_id=user_id, text=f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {country}')

@dp.message_handler(commands=['add_profit'])
async def add_profit(message: types.Message):
    user_id = message.from_user.id
    if is_sponsor(int(user_id)):
        data = message.text
        worker = data[data.find('1)')+1:data.find('2)')]
        if ')' in worker:
            worker = worker[:worker.find('3)')]

        worker = worker[1:]
        worker = worker.replace(' ', '').replace('@', '').replace('\n', '')
        print(f"aa{worker}aa")

        if '2)' in data:
            tp = data[data.find('2)') + 2:data.find('3)') - 1]
            tp = tp.replace(' ', '').replace('@', '').replace('\n', '')
        else:
            tp = '–ù–µ—Ç—É'

        cat = str(data[data.find('4)') + 2:]).replace(' ', '')
        full = str(data[data.find('3)') + 1:data.find('4)') - 1])
        float_pattern = re.compile(r'[-+]?\d*\.\d+|\d+')
        match = float_pattern.search(full)
        if match:
            full = float(match.group())
            user = session.query(User).filter(User.username == worker).first()
            prof = Profits(user_id=int(user.tg_id), username_worker=worker,
                           full_profit=full, tech_supp_username=tp, category=cat)
            share = share_worker(prof)
            text = f'üí∏ –ó–ê–õ–ï–ï–ï–¢! - {full} USDT üí∏\n' \
                   f'–¢–ü: @{tp}\n' \
                   f'–ß–∞—Å—Ç—å –≤–æ—Ä–∫–µ—Ä–∞: {share} USDT\n' \
                   f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {prof.category}'



            await bot.send_message(chat_id=user_id,
                                   text=f'–ü—Ä–æ—Ñ–∏—Ç —Å–æ–∑–¥–∞–Ω!')
            await bot.send_message(chat_id='-1002014887503',
                                   text=text)

            await bot.send_message(chat_id='-1002106623204',
                                   text=text)

            await bot.send_message(chat_id=int(user.tg_id),
                                   text=text)
        else:
            await bot.send_message(chat_id=user_id, text=f'–í–∞—à–∞ —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–∫—Ç–æ–º —à–∞–±–ª–æ–Ω–∞')


@dp.message_handler(lambda message: message.text)
async def save_bid(message: types.Message):
    user_id = message.from_user.id
    if is_worker(user_id) == False:
        bid = add_bid(message.text, int(message.from_user.id))
        await send_new_bid(bid)
        await bot.send_message(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ :)", chat_id=user_id)

if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
